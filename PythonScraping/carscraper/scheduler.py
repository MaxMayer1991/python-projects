import os
import sys
import subprocess
from datetime import datetime
from apscheduler.schedulers.blocking import BlockingScheduler


def is_docker_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —á–∏ –ø—Ä–∞—Ü—é—î–º–æ –≤ Docker"""
    return (os.path.exists('/.dockerenv') or
            os.getenv('DOCKER_ENV') == 'true' or
            os.path.exists('/app/carscraper'))


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if is_docker_environment():
    print("üê≥ Docker —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏—è–≤–ª–µ–Ω–æ")
    CARSCRAPER_DIR = '/app'
    DUMP_DIR = '/app/data'
    LOG_DIR = '/app/logs'
    DEFAULT_DB_HOST = 'postgres'
else:
    print("üíª –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏—è–≤–ª–µ–Ω–æ")
    current_dir = os.getcwd()
    if os.path.exists('carscraper') and os.path.exists('carscraper/scrapy.cfg'):
        CARSCRAPER_DIR = os.path.abspath('carscraper')
        project_root = current_dir
    else:
        project_root = os.path.dirname(current_dir)
        CARSCRAPER_DIR = current_dir

    DUMP_DIR = os.path.join(project_root, 'data')
    LOG_DIR = os.path.join(project_root, 'logs')
    DEFAULT_DB_HOST = 'localhost'

# ‚úÖ –ë–ï–ó–ü–ï–ß–ù–ï –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–ë–ï–ó –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!)
DB_NAME = os.getenv('POSTGRES_DB')
DB_USER = os.getenv('POSTGRES_USER')
DB_PASS = os.getenv('POSTGRES_PASSWORD')
DB_HOST = os.getenv('POSTGRES_HOST', DEFAULT_DB_HOST)
DB_PORT = os.getenv('POSTGRES_PORT', '5432')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
required_vars = {
    'POSTGRES_DB': DB_NAME,
    'POSTGRES_USER': DB_USER,
    'POSTGRES_PASSWORD': DB_PASS
}

missing_vars = [name for name, value in required_vars.items() if not value]
if missing_vars:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
    for var in missing_vars:
        print(f"   - {var}")
    print("üîß –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –≤ .env —Ñ–∞–π–ª—ñ –∞–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ docker-compose")
    sys.exit(1)

# –ß–∞—Å –∑–∞–ø—É—Å–∫—É
SPIDER_TIME = os.getenv('SPIDER_TIME')
DUMP_TIME = os.getenv('DUMP_TIME')

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏
for directory in [DUMP_DIR, LOG_DIR]:
    os.makedirs(directory, exist_ok=True)


def run_spider():
    """–ó–∞–ø—É—Å–∫ Scrapy spider"""
    print(f"[{datetime.now()}] üï∑Ô∏è –ó–∞–ø—É—Å–∫ Scrapy spider...")

    original_dir = os.getcwd()
    try:
        os.chdir(CARSCRAPER_DIR)

        if not os.path.exists('scrapy.cfg'):
            raise FileNotFoundError(f"scrapy.cfg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ {CARSCRAPER_DIR}")

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        log_file = f"{LOG_DIR}/spider_{timestamp}.log"
        data_file = f"{DUMP_DIR}/cars_{timestamp}.csv"

        cmd = [
            sys.executable, '-m', 'scrapy', 'crawl', 'carspider',
            '-L', 'INFO',
            '--logfile', log_file,
            '-o', data_file
        ]

        print(f"üìã –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)

        print(f"‚úÖ Spider –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ")
        print(f"üìÑ –õ–æ–≥: {log_file}")
        print(f"üìä –î–∞–Ω—ñ: {data_file}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ spider: {e}")
    finally:
        os.chdir(original_dir)


def dump_db():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–º–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print(f"[{datetime.now()}] üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–º–ø—É –ë–î...")

    timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    dump_file = os.path.join(DUMP_DIR, f'dump_{timestamp}.sql')

    cmd = ['pg_dump', '-h', DB_HOST, '-p', DB_PORT, '-U', DB_USER, '-d', DB_NAME, '-f', dump_file]

    env = os.environ.copy()
    env['PGPASSWORD'] = DB_PASS

    try:
        subprocess.run(cmd, env=env, check=True)
        print(f"‚úÖ –î–∞–º–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ: {dump_file}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–º–ø—É: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ scheduler...")
    print(f"üìÅ Scrapy: {CARSCRAPER_DIR}")
    print(f"üìÅ –õ–æ–≥–∏: {LOG_DIR}")
    print(f"üìÅ –î–∞–Ω—ñ: {DUMP_DIR}")
    print(f"üîó –ë–î: {DB_USER}@{DB_HOST}:{DB_PORT}/{DB_NAME}")

    scheduler = BlockingScheduler()

    # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
    hour, minute = map(int, SPIDER_TIME.split(':'))
    scheduler.add_job(run_spider, 'cron', hour=hour, minute=minute, id='spider_job')
    print(f"‚è∞ Spider: {SPIDER_TIME}")

    d_hour, d_minute = map(int, DUMP_TIME.split(':'))
    scheduler.add_job(dump_db, 'cron', hour=d_hour, minute=d_minute, id='dump_job')
    print(f"üíæ –î–∞–º–ø: {DUMP_TIME}")

    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫
    if os.getenv('RUN_SPIDER_NOW', '').lower() == 'true':
        print("üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫...")
        run_spider()

    try:
        scheduler.start()
    except KeyboardInterrupt:
        print("üõë –ó—É–ø–∏–Ω–µ–Ω–æ")


if __name__ == '__main__':
    main()
